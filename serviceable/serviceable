from datetime import date
from abc import ABC, abstractmethod

class Serviceable(ABC):
    @abstractmethod
    def needs_service(self):
        pass

class Battery(Serviceable):
    @abstractmethod
    def needs_service(self):
        pass

# Define SpindlerBattery and NubbinBattery subclasses similarly...

class Engine(Serviceable):
    @abstractmethod
    def needs_service(self):
        pass

# Define CapuletEngine, WilloughbyEngine, and SternmanEngine subclasses similarly...

class Car:
    def __init__(self, engine, battery):
        self.engine = engine
        self.battery = battery

    def needs_service(self):
        return self.engine.needs_service() or self.battery.needs_service()

# Rest of the CarFactory, Car, and other classes remain the same.
